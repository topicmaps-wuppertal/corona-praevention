{"version":3,"sources":["Menu.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","height","windowSize","useContext","ResponsiveTopicMapContext","DefaultAppMenu","menuTitle","previewMapPosition","titleCheckBoxlabel","introductionMarkdown","simpleHelp","content","sections","_10statistics","Section","sectionKey","sectionTitle","sectionBsStyle","sectionContent","width","frameBorder","src","host","getGazData","setGazData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","convertPOIItemsToFeature","itemIn","addSVGToProps","i","signatur","mainlocationtype","item","text","name","geometry","geojson","aktiv","info","match","matches","exec","result","endsWith","dateStringArr","split","ab","Date","parseInt","now","toLowerCase","includes","color","header","lebenslagen","join","title","additionalInfo","subtitle","adresse","type","selected","crs","properties","mapTitle","App","useState","useEffect","document","TopicMapContextProvider","appKey","featureItemsURL","getFeatureStyler","getGTMFeatureStyler","featureTooltipFunction","feature","convertItemToFeature","clusteringOptions","iconCreateFunction","getClusterIconCreatorFunction","props","itemFilterFunction","clusteringEnabled","getColorFromProperties","titleFactory","TopicMapComponent","modalMenu","homeCenter","homeZoom","locatorControl","applicationMenuTooltipString","gazetteerSearchPlaceholder","infoBox","GenericInfoBoxFromFeature","pixelwidth","config","city","navigator","noun","singular","plural","noCurrentFeatureTitle","noCurrentFeatureContent","FeatureCollection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70923deb.chunk.js","sourcesContent":["import { useContext } from \"react\";\nimport { ResponsiveTopicMapContext } from \"react-cismap/contexts/ResponsiveTopicMapContextProvider\";\nimport DefaultAppMenu from \"react-cismap/topicmaps/menu/DefaultAppMenu\";\nimport Section from \"react-cismap/topicmaps/menu/Section\";\nconst Menu = () => {\n  const { windowSize } = useContext(ResponsiveTopicMapContext);\n  let height;\n\n  if (windowSize?.height) {\n    height = windowSize?.height * 0.6;\n  } else {\n    height = 250;\n  }\n  return (\n    <DefaultAppMenu\n      menuTitle='Einstellungen, Statistik und Kompaktanleitung'\n      previewMapPosition='lat=51.24620211666691&lng=7.150774041211521&zoom=9'\n      titleCheckBoxlabel='Titel anzeigen'\n      introductionMarkdown={`Über **Einstellungen** können Sie die Darstellung der Hintergrundkarte \n                und der Objekte an Ihre Vorlieben anpassen. Unter **Statistik** finden \n                Sie eine Darstellung der aktuellen Fallzahlen. Wählen Sie \n                **Kompaktanleitung** für detailliertere Bedienungsinformationen.\n      `}\n      simpleHelp={{\n        content: `Ein kostenloser Corona-Schnelltest pro Woche - dieses Angebot richtet sich seit \n        Mitte März 2021 an jede Bürgerin und jeden Bürger. Auch in Wuppertal entstehen immer mehr \n        Schnelltestzentren. Die Corona-Präventionskarte bietet einen Überblick über die Testzentren \n        und sonstige relevante Einrichtungen wie das Corona-Impfzentrum. Die Informationen zu diesen \n        \"Corona-Präventionsorten\" werden zunächst vom Presseamt der Stadt Wuppertal auf der städtischen \n        Homepage publiziert und von dort zeitnah vom Team \"Stadtkartographie\" in den Datensatz der \n        [interessanten Orte](https://offenedaten-wuppertal.de/dataset/interessante-orte-poi-wuppertal) \n        (Points of Interest, kurz POI) im Wuppertaler Stadtgebiet übernommen. Diese Daten sind die \n        Grundlage für die Darstellung in der Corona-Präventionskarte. Sie sind auch im Open-Data-Angebot \n        der Stadt Wuppertal im täglich automatisch aktualisierten Datensatz \n        [Corona-Präventionsorte Wuppertal](https://offenedaten-wuppertal.de/dataset/corona-pr%C3%A4ventionsorte-wuppertal) \n        verfügbar.`,\n      }}\n      sections={{\n        _10statistics: (\n          <Section\n            key='statistik'\n            sectionKey='StatistikSection'\n            sectionTitle='Statistik (aktuelle Fallzahlen)'\n            sectionBsStyle='danger'\n            sectionContent={\n              <div>\n                <p>\n                  Das folgende Diagramm wird stündlich automatisch an die beim Gesundheitsamt zur\n                  COVID-19-Epidemie erfassten Fallzahlen angepasst. Bewegen Sie den Mauszeiger auf\n                  eine der farbigen Säulen in der Grafik, um sich die jeweilige Fallzahl und das\n                  zugehörige Referenzdatum anzeigen zu lassen. Durch Anklicken der farbigen Punkte\n                  in der Legende unterhalb des Diagramms können Sie einzelne Rubriken aus- und\n                  wieder einblenden.\n                </p>\n\n                <iframe\n                  width='100%'\n                  frameBorder='0'\n                  height={height}\n                  src='https://stadt-wuppertal.maps.arcgis.com/apps/opsdashboard/index.html#/08a2f92cd26c4f459a7f0ee42f7653ce'\n                ></iframe>\n              </div>\n            }\n          />\n        ),\n      }}\n    ></DefaultAppMenu>\n  );\n};\nexport default Menu;\n","import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport { md5FetchText, fetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\n\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\n\nimport MyMenu from \"./Menu\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\nimport { addSVGToProps } from \"react-cismap/tools/svgHelper\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getGazData = async (setGazData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\n\nconst convertPOIItemsToFeature = async (itemIn) => {\n  let item = await addSVGToProps(\n    itemIn,\n    (i) => i.signatur || i?.mainlocationtype?.signatur || \"Platz.svg\"\n  );\n  const text = item?.name || \"Kein Name\";\n  const type = \"Feature\";\n  const selected = false;\n  const geometry = item?.geojson;\n\n  let aktiv = true;\n\n  if (item?.info && item.info.match(/^Kostenlose Bürgertestung .ab \\d+.\\d+/)) {\n    const regExp = /\\(ab ([^)]+)\\)/;\n    const matches = regExp.exec(item?.info);\n    let result = matches[1];\n    if (!result.endsWith(\".\")) {\n      result = result + \".\";\n    }\n\n    const dateStringArr = (result + \"2021\").split(\".\");\n\n    const ab = new Date(\n      parseInt(dateStringArr[2]),\n      parseInt(dateStringArr[1] - 1),\n      parseInt(dateStringArr[0])\n    );\n    const now = new Date();\n\n    if (ab < now) {\n      aktiv = true;\n    } else {\n      aktiv = false;\n    }\n  }\n\n  if (item?.name?.toLowerCase().includes(\"impf\")) {\n    item.color = \"#74000B\";\n  } else if (aktiv === true) {\n    item.color = \"#CB0D0D\";\n  } else {\n    item.color = \"#757774\";\n  }\n\n  const info = {\n    header: item?.mainlocationtype?.lebenslagen?.join(\",\"),\n    title: text,\n    additionalInfo: item?.info || \"\",\n    subtitle: item?.adresse || \"\",\n  };\n  item.info = info;\n\n  return {\n    text,\n    type,\n    selected,\n    geometry,\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    },\n    properties: item,\n  };\n};\n\nconst mapTitle = \"Corona-Präventionskarte\";\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n  useEffect(() => {\n    document.title = mapTitle;\n    getGazData(setGazData);\n  }, []);\n  return (\n    <TopicMapContextProvider\n      appKey='CoronaPraeventionskarteWuppertal.TopicMap'\n      featureItemsURL={\"https://wupp-topicmaps-data.cismet.de/data/poi.data.json\"}\n      getFeatureStyler={getGTMFeatureStyler}\n      featureTooltipFunction={(feature) => feature?.text}\n      convertItemToFeature={convertPOIItemsToFeature}\n      clusteringOptions={{\n        iconCreateFunction: getClusterIconCreatorFunction(30, (props) => props.color),\n      }}\n      itemFilterFunction={() => {\n        return (item) => item?.mainlocationtype?.name?.toLowerCase().includes(\"corona\");\n        // item?.name?.toLowerCase().includes(\"test\");\n      }}\n      clusteringEnabled={true}\n      getColorFromProperties={(props) => props.color}\n      titleFactory={() => {\n        return (\n          <div>\n            <b>{mapTitle}</b>\n          </div>\n        );\n      }}\n    >\n      <TopicMapComponent\n        modalMenu={<MyMenu />}\n        homeCenter={[51.251236352367464, 7.162581102842314]}\n        homeZoom={7}\n        locatorControl={true}\n        gazData={gazData}\n        applicationMenuTooltipString='Einstelllungen | Statistik | Anleitung'\n        gazetteerSearchPlaceholder='Stadtteil | Adresse | POI'\n        infoBox={\n          <GenericInfoBoxFromFeature\n            pixelwidth={400}\n            config={{\n              city: \"Wuppertal\",\n              navigator: {\n                noun: {\n                  singular: \"Zentrum\",\n                  plural: \"Zentren\",\n                },\n              },\n              noCurrentFeatureTitle: \"Keine Zentren gefunden\",\n              noCurrentFeatureContent: \"\",\n            }}\n          />\n        }\n      >\n        <FeatureCollection />\n      </TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}