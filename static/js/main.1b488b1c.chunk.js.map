{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["host","getGazData","setGazData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","convertPOIItemsToFeature","itemIn","console","log","addSVGToProps","i","signatur","mainlocationtype","item","text","name","geometry","geojson","color","info","header","lebenslagen","join","title","additionalInfo","subtitle","adresse","type","selected","crs","properties","mapTitle","App","useState","useEffect","document","TopicMapContextProvider","appKey","featureItemsURL","getFeatureStyler","getGTMFeatureStyler","convertItemToFeature","clusteringOptions","iconCreateFunction","getClusterIconCreatorFunction","props","itemFilterFunction","toLowerCase","includes","clusteringEnabled","getColorFromProperties","titleFactory","TopicMapComponent","locatorControl","infoBox","GenericInfoBoxFromFeature","pixelwidth","config","city","navigator","noun","singular","plural","noCurrentFeatureTitle","noCurrentFeatureContent","FeatureCollection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b488b1c.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport { md5FetchText, fetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\n\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\nimport { addSVGToProps } from \"react-cismap/tools/svgHelper\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getGazData = async (setGazData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\nconst convertPOIItemsToFeature = async (itemIn) => {\n  console.log(\"itemIn\", itemIn);\n\n  let item = await addSVGToProps(\n    itemIn,\n    (i) => i.signatur || i?.mainlocationtype?.signatur || \"Platz.svg\"\n  );\n  const text = item?.name || \"Kein Name\";\n  const type = \"Feature\";\n  const selected = false;\n  const geometry = item?.geojson;\n  item.color = \"#CB0D0D\";\n  const info = {\n    header: item?.mainlocationtype?.lebenslagen?.join(\",\"),\n    title: text,\n    additionalInfo: item?.info,\n    subtitle: <span>{item?.adresse}</span>,\n  };\n  item.info = info;\n\n  return {\n    text,\n    type,\n    selected,\n    geometry,\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    },\n    properties: item,\n  };\n};\n\nconst mapTitle = \"Corona-PrÃ¤ventionskarte\";\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n  useEffect(() => {\n    document.title = mapTitle;\n    getGazData(setGazData);\n  }, []);\n  return (\n    <TopicMapContextProvider\n      appKey='CoronaPraeventionskarteWuppertal.TopicMap'\n      featureItemsURL={\"https://wupp-topicmaps-data.cismet.de/data/poi.data.json\"}\n      getFeatureStyler={getGTMFeatureStyler}\n      convertItemToFeature={convertPOIItemsToFeature}\n      clusteringOptions={{\n        iconCreateFunction: getClusterIconCreatorFunction(30, (props) => props.color),\n      }}\n      itemFilterFunction={() => {\n        return (item) => item?.mainlocationtype?.name?.toLowerCase().includes(\"corona\");\n        // item?.name?.toLowerCase().includes(\"test\");\n      }}\n      clusteringEnabled={true}\n      getColorFromProperties={(props) => props.color}\n      titleFactory={() => {\n        return (\n          <div>\n            <b>{mapTitle}</b>\n          </div>\n        );\n      }}\n    >\n      <TopicMapComponent\n        locatorControl={true}\n        gazData={gazData}\n        infoBox={\n          <GenericInfoBoxFromFeature\n            pixelwidth={400}\n            config={{\n              city: \"Wuppertal\",\n              navigator: {\n                noun: {\n                  singular: \"Zentrum\",\n                  plural: \"Zentren\",\n                },\n              },\n              noCurrentFeatureTitle: \"Keine Zentren gefunden\",\n              noCurrentFeatureContent: \"\",\n            }}\n          />\n        }\n      >\n        <FeatureCollection />\n      </TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}